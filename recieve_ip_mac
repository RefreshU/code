/*******************************************************************************************************/
* 	client recieve a struct from server by function recvfrom(), 
*
*
/*******************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <string.h>
#include <sys/select.h>
#include <net/if.h>
#include <net/if_arp.h>
#include <errno.h>
#include <sys/ioctl.h>

#define BUFFER_LEN 64
#define IP_FOUND "IP_FOUND"
#define IP_FOUND_ACK "ACK"
#define IFNAME "eth0"
#define MCAST_PORT 8888
/*************************************
/
/*****************************
struct  Device_Info   					//Information of device
{
    char device_ip[20];					
    char device_num[8];
    char device_mac[20];
    char info[10];
};

int main()
{
    int ret = -1;
    int sock = -1;
    int count = -1;
    int from_len;
    int so_broadcast = 1;
    struct Device_Info *device;    

    struct ifreq ifr;					//
    struct sockaddr_in broadcast_addr;	// Local address
    struct sockaddr_in from_addr;		// Server address
    struct timeval timeout;

    fd_set readfd;
    char buff[BUFFER_LEN];

    timeout.tv_sec = 2;
    timeout.tv_usec = 0;

    sock = socket(AF_INET, SOCK_DGRAM, 0);
    if(sock < 0)
    {
        printf("socket init error ...\n");
        return 0;
    }
    strcpy(ifr.ifr_name, IFNAME);

    if(ioctl(sock, SIOCGIFBRDADDR, &ifr) == -1)
    {
        perror("ioctl error ...");
        exit(1);
    }
    memcpy(&broadcast_addr, &ifr.ifr_broadaddr, sizeof(struct sockaddr_in));
	
	/* initiating a broadcast struct */	
    broadcast_addr.sin_family = AF_INET;							//setting the type of address is AF_INET
    broadcast_addr.sin_addr.s_addr = htonl(INADDR_BROADCAST);		//setting ip is broadcast 
    broadcast_addr.sin_port = htons(MCAST_PORT);					//setting the broadcast port

	/* setting the file's type of sock is BROADCAST */
    ret = setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &so_broadcast, sizeof(so_broadcast));		
    if(ret == -1)
    {
        printf("Fail to set socket..\n ");
        return 0;
    }
    int times = 10;
    int i = 0;
    for(i = 0; i < times; i++)
    {	
		/*send a string to the Server */
        ret = sendto(sock, IP_FOUND, strlen(IP_FOUND), 0, (struct sockaddr*)&broadcast_addr, sizeof(broadcast_addr));
        if( ret == -1)
            continue;
        FD_ZERO(&readfd);
        FD_SET(sock, &readfd);
        ret = select(sock+1, &readfd, NULL, NULL, &timeout);
        switch(ret)
        {
            case -1:
                printf("error!!\n");
                break;
            case 0:
                printf("timeout ....\n");
                break;
            default:
                if(FD_ISSET(sock, &readfd))				//
                {   memset(buff, 0, BUFFER_LEN);
                      count = recvfrom(sock, buff, BUFFER_LEN, 0, (struct sockaddr*)&from_addr, &from_len);
                 //   count = recvfrom(sock, (struct Device_Info*)device, sizeof(*device), 0, (struct sockaddr*)&from_addr, &from_len);
                    printf("count = %d \n", count);
                    device = (struct Device_Info *)&buff;
                    printf("match information :%s\n",device->info);
                    printf("device ip :%s \n", device->device_ip);
                    printf("device mac:%s\n", device->device_mac);
                    printf("device num:%s\n", device->device_num);
                    if(strstr(buff, IP_FOUND_ACK))
                    {
                        printf("found server, IP is %s\n",inet_ntoa(from_addr.sin_addr));
                    }
                break;
                }
        }
    }

    return 0;
}
